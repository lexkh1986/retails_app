endpoints:
/login {username, password} - to generate jwt token for other requests
/logout/{username} - to kill the session
/user
  - Support get individual user by username
  - Support create a new user (not superuser)
  - Support edit individual user by username
  - Support remove a user by username
/customer
  - Support get individual customer by id
  - Support search all customers with specific search keyword for firstname (contains)
  - Support create a new customer
  - Support edit individual customer by id
  - Support remove a customer by id
/product
  - Support get individual product by id
  - Support search all products with specific search keyword for name (contains)
  - Support create a new product
  - Support edit an existing product by id
  - Support remove a product by id
/inventory
  - Support create a new inventory record
  - Support edit an existing record by id
  - Support remove a record by id
/order
  - Support create a new order
  - Support edit an existing order (with order details)
  - Support remove an order (together with order details)

business requirements
1. A superuser (admin) should be initialized (with password "12345678") from database. He is the first one user in the system and created without api
2. All API requests other than login must be validated by a jwt bearer token which is generated by login request (return 401 error)
3. Have middleware to handle requests accessing to invalid endpoints and methods (return 404 & 403 error)
4. App should validates all requests from creating/editing data with non-nullable fields (return 400 bad request error)
6. Return 404 not found for all requests with invalid or not existing entity id
7. Return 400 bad request with suitable message error for invalid email format, datetime format
8. Return 400 bad request for all creating/editing with duplicating fields
9. All error response should have generic schema:
         {errCode, errMsg}
10. Use uuid for entity id with all columns format as string

technical requirements
11. App uses SOLID best practice
12. All classes, methods, codes should have code comments
13. Use best FastAPI code design and practice base on community standard
14. App should support concurrent requests

documentation requirements
15. Provide full guidelines to installation, dependencies and deployment
16. Provide folder structure
17. Provide full code files and scripts